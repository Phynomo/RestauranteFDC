// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Restaurante.Entities.Entities;

#nullable disable

namespace Restaurante.DataAccess.Context
{
    public partial class DbrestauranteContext : DbContext
    {
        public DbrestauranteContext()
        {
        }

        public DbrestauranteContext(DbContextOptions<DbrestauranteContext> options)
            : base(options)
        {
        }

        public virtual DbSet<VW_tbCargos> VW_tbCargos { get; set; }
        public virtual DbSet<VW_tbCategorias> VW_tbCategorias { get; set; }
        public virtual DbSet<VW_tbClientes> VW_tbClientes { get; set; }
        public virtual DbSet<VW_tbDepartamentos> VW_tbDepartamentos { get; set; }
        public virtual DbSet<VW_tbEmpleados> VW_tbEmpleados { get; set; }
        public virtual DbSet<VW_tbEstadosCiviles> VW_tbEstadosCiviles { get; set; }
        public virtual DbSet<VW_tbFacturaDetalles> VW_tbFacturaDetalles { get; set; }
        public virtual DbSet<VW_tbFacturas> VW_tbFacturas { get; set; }
        public virtual DbSet<VW_tbIngredientes> VW_tbIngredientes { get; set; }
        public virtual DbSet<VW_tbMetodosPago> VW_tbMetodosPago { get; set; }
        public virtual DbSet<VW_tbMunicipios> VW_tbMunicipios { get; set; }
        public virtual DbSet<VW_tbPantallas> VW_tbPantallas { get; set; }
        public virtual DbSet<VW_tbPlatillos> VW_tbPlatillos { get; set; }
        public virtual DbSet<VW_tbProveedores> VW_tbProveedores { get; set; }
        public virtual DbSet<VW_tbReservaciones> VW_tbReservaciones { get; set; }
        public virtual DbSet<VW_tbRoles> VW_tbRoles { get; set; }
        public virtual DbSet<VW_tbSucursales> VW_tbSucursales { get; set; }
        public virtual DbSet<VW_tbUsuarios> VW_tbUsuarios { get; set; }
        public virtual DbSet<tbCargos> tbCargos { get; set; }
        public virtual DbSet<tbCategorias> tbCategorias { get; set; }
        public virtual DbSet<tbClientes> tbClientes { get; set; }
        public virtual DbSet<tbDepartamentos> tbDepartamentos { get; set; }
        public virtual DbSet<tbEmpleados> tbEmpleados { get; set; }
        public virtual DbSet<tbEstadosCiviles> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbFacturas> tbFacturas { get; set; }
        public virtual DbSet<tbFacturasDetalles> tbFacturasDetalles { get; set; }
        public virtual DbSet<tbIngredientes> tbIngredientes { get; set; }
        public virtual DbSet<tbIngredientesHistorial> tbIngredientesHistorial { get; set; }
        public virtual DbSet<tbIngredientesXPlatillos> tbIngredientesXPlatillos { get; set; }
        public virtual DbSet<tbIngredientesXSucursal> tbIngredientesXSucursal { get; set; }
        public virtual DbSet<tbMetodosPago> tbMetodosPago { get; set; }
        public virtual DbSet<tbMunicipios> tbMunicipios { get; set; }
        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbPantallasPorRoles> tbPantallasPorRoles { get; set; }
        public virtual DbSet<tbPlatillos> tbPlatillos { get; set; }
        public virtual DbSet<tbPlatillosHistorial> tbPlatillosHistorial { get; set; }
        public virtual DbSet<tbPlatillosHistorial2> tbPlatillosHistorial2 { get; set; }
        public virtual DbSet<tbProveedores> tbProveedores { get; set; }
        public virtual DbSet<tbReservaciones> tbReservaciones { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbSucursales> tbSucursales { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS");

            modelBuilder.Entity<VW_tbCargos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbCargos", "gral");

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.carg_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbCategorias>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbCategorias", "gral");

                entity.Property(e => e.cate_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cate_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.cate_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbClientes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbClientes", "rest");

                entity.Property(e => e.InicialSexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clie_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.clie_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_RTN)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbDepartamentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbDepartamentos", "gral");

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.depa_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbEmpleados>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEmpleados", "rest");

                entity.Property(e => e.InicialSexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.eciv_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_CorreoElectronico).HasMaxLength(200);

                entity.Property(e => e.empe_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empe_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empe_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Sexo)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.empe_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbEstadosCiviles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEstadosCiviles", "gral");

                entity.Property(e => e.eciv_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.eciv_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.eciv_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbFacturaDetalles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbFacturaDetalles", "rest");

                entity.Property(e => e.cate_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.clie_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_RTN)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.fade_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.fade_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.fade_Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.plat_Imagen).IsRequired();

                entity.Property(e => e.plat_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.plat_Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbFacturas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbFacturas", "rest");

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.clie_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_RTN)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.fact_Fecha).HasColumnType("datetime");

                entity.Property(e => e.fact_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.fact_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.metp_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.sucu_Direccion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbIngredientes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbIngredientes", "rest");

                entity.Property(e => e.ingr_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.ingr_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ingr_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ingr_PrecioX100gr).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.prov_NombreEmpresa)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbMetodosPago>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbMetodosPago", "gral");

                entity.Property(e => e.metp_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.metp_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.metp_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbMunicipios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbMunicipios", "gral");

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbPantallas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbPantallas", "acce");

                entity.Property(e => e.pant_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_HtmlId)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.pant_Id).ValueGeneratedOnAdd();

                entity.Property(e => e.pant_Menu)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pant_Url)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<VW_tbPlatillos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbPlatillos", "rest");

                entity.Property(e => e.cate_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.plat_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.plat_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.plat_Imagen).IsRequired();

                entity.Property(e => e.plat_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.plat_Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbProveedores>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbProveedores", "rest");

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.prov_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.prov_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.prov_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prov_NombreContacto)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.prov_NombreEmpresa)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.prov_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbReservaciones>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbReservaciones", "rest");

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_RTN)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.rese_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.rese_FechaHora).HasColumnType("datetime");

                entity.Property(e => e.rese_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbRoles", "acce");

                entity.Property(e => e.role_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbSucursales>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbSucursales", "rest");

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.sucu_Direccion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.sucu_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.sucu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbUsuarios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbUsuarios", "acce");

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_Apellidos).HasMaxLength(200);

                entity.Property(e => e.clie_NombreCompleto).HasMaxLength(401);

                entity.Property(e => e.clie_Nombres).HasMaxLength(200);

                entity.Property(e => e.empe_Apellidos).HasMaxLength(200);

                entity.Property(e => e.empe_NombreCompleto).HasMaxLength(401);

                entity.Property(e => e.empe_Nombres).HasMaxLength(200);

                entity.Property(e => e.role_Nombre).HasMaxLength(100);

                entity.Property(e => e.user_Contrasena).IsRequired();

                entity.Property(e => e.user_Correo).HasMaxLength(200);

                entity.Property(e => e.user_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.user_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuModificacion).HasMaxLength(100);

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<tbCargos>(entity =>
            {
                entity.HasKey(e => e.carg_Id)
                    .HasName("PK_gral_tbcargos_carg_Id");

                entity.ToTable("tbCargos", "gral");

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.carg_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.carg_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.carg_UsuCreacionNavigation)
                    .WithMany(p => p.tbCargoscarg_UsuCreacionNavigation)
                    .HasForeignKey(d => d.carg_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PK_gral_tbCargos_acce_tbUsuarios_carg_UsuCreacion");

                entity.HasOne(d => d.carg_UsuModificacionNavigation)
                    .WithMany(p => p.tbCargoscarg_UsuModificacionNavigation)
                    .HasForeignKey(d => d.carg_UsuModificacion)
                    .HasConstraintName("PK_gral_tbCargos_acce_tbUsuarios_carg_UsuModificacion");
            });

            modelBuilder.Entity<tbCategorias>(entity =>
            {
                entity.HasKey(e => e.cate_Id)
                    .HasName("PK_gral_tbCategorias_cate_Id");

                entity.ToTable("tbCategorias", "gral");

                entity.Property(e => e.cate_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cate_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.cate_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.cate_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.cate_UsuCreacionNavigation)
                    .WithMany(p => p.tbCategoriascate_UsuCreacionNavigation)
                    .HasForeignKey(d => d.cate_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PK_gral_tbCategorias_acce_tbUsuarios_cate_UsuCreacion");

                entity.HasOne(d => d.cate_UsuModificacionNavigation)
                    .WithMany(p => p.tbCategoriascate_UsuModificacionNavigation)
                    .HasForeignKey(d => d.cate_UsuModificacion)
                    .HasConstraintName("PK_gral_tbCategorias_acce_tbUsuarios_cate_UsuModificacion");
            });

            modelBuilder.Entity<tbClientes>(entity =>
            {
                entity.HasKey(e => e.clie_Id)
                    .HasName("PK_rest_tbClientes_clie_Id");

                entity.ToTable("tbClientes", "rest");

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clie_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.clie_RTN)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.clie_UsuCreacionNavigation)
                    .WithMany(p => p.tbClientesclie_UsuCreacionNavigation)
                    .HasForeignKey(d => d.clie_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbClientes_acce_tbUsuarios_UserCreate");

                entity.HasOne(d => d.clie_UsuModificacionNavigation)
                    .WithMany(p => p.tbClientesclie_UsuModificacionNavigation)
                    .HasForeignKey(d => d.clie_UsuModificacion)
                    .HasConstraintName("FK_rest_tbClientes_acce_tbUsuarios_UserUpdate");
            });

            modelBuilder.Entity<tbDepartamentos>(entity =>
            {
                entity.HasKey(e => e.depa_Id)
                    .HasName("PK_gral_tbDepartamentos_depa_Id");

                entity.ToTable("tbDepartamentos", "gral");

                entity.Property(e => e.depa_Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.depa_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.depa_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.depa_UsuCreacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuCreacionNavigation)
                    .HasForeignKey(d => d.depa_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuCreacion_user_Id");

                entity.HasOne(d => d.depa_UsuModificacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuModificacionNavigation)
                    .HasForeignKey(d => d.depa_UsuModificacion)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbEmpleados>(entity =>
            {
                entity.HasKey(e => e.empe_Id)
                    .HasName("PK_rest_tbEmpleados_empe_Id");

                entity.ToTable("tbEmpleados", "rest");

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_CorreoElectronico).HasMaxLength(200);

                entity.Property(e => e.empe_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empe_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.empe_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.empe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empe_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empe_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.carg)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.carg_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbEmpleados_lice_tbCargos_carg_Id");

                entity.HasOne(d => d.eciv)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.eciv_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbEmpleados_gral_tbEstadosCiviles_eciv_Id");

                entity.HasOne(d => d.empe_UsuCreacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuCreacionNavigation)
                    .HasForeignKey(d => d.empe_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbEmpleados_acce_tbUsuarios_UserCreate");

                entity.HasOne(d => d.empe_UsuModificacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuModificacionNavigation)
                    .HasForeignKey(d => d.empe_UsuModificacion)
                    .HasConstraintName("FK_rest_tbEmpleados_acce_tbUsuarios_UserUpdate");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbEmpleados_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.sucu)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.sucu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbEmpleados_lice_tbSucursales_sucu_Id");
            });

            modelBuilder.Entity<tbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.eciv_Id)
                    .HasName("PK_gral_tbEstadosCiviles_ectv_Id");

                entity.ToTable("tbEstadosCiviles", "gral");

                entity.Property(e => e.eciv_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.eciv_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.eciv_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.eciv_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.eciv_UsuCreacionNavigation)
                    .WithMany(p => p.tbEstadosCivileseciv_UsuCreacionNavigation)
                    .HasForeignKey(d => d.eciv_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_UsuCreacion_usua_Id");

                entity.HasOne(d => d.eciv_UsuModificacionNavigation)
                    .WithMany(p => p.tbEstadosCivileseciv_UsuModificacionNavigation)
                    .HasForeignKey(d => d.eciv_UsuModificacion)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbFacturas>(entity =>
            {
                entity.HasKey(e => e.fact_Id)
                    .HasName("PK_rest_tbFacturas_fact_Id");

                entity.ToTable("tbFacturas", "rest");

                entity.Property(e => e.fact_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.fact_Fecha)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fact_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fact_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbFacturas_tbClientes_clie_id");

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.empe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbFacturas_rest_tbEmpleados_empl_Id");

                entity.HasOne(d => d.fact_UsuCreacionNavigation)
                    .WithMany(p => p.tbFacturasfact_UsuCreacionNavigation)
                    .HasForeignKey(d => d.fact_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbFacturas_acce_tbUsuarios_ped_UsuCreacion_usur_Id");

                entity.HasOne(d => d.fact_UsuModificacionNavigation)
                    .WithMany(p => p.tbFacturasfact_UsuModificacionNavigation)
                    .HasForeignKey(d => d.fact_UsuModificacion)
                    .HasConstraintName("FK_rest_tbFacturas_acce_tbUsuarios_ped_UsuModificacion_usur_Id");

                entity.HasOne(d => d.metp)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.metp_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbFacturas_tbMetodoPago_metp_id");
            });

            modelBuilder.Entity<tbFacturasDetalles>(entity =>
            {
                entity.HasKey(e => e.fade_Id)
                    .HasName("PK_rest_tbFacturasDetalles_fade_Id");

                entity.ToTable("tbFacturasDetalles", "rest");

                entity.Property(e => e.fade_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.fade_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fade_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.fade_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.fact)
                    .WithMany(p => p.tbFacturasDetalles)
                    .HasForeignKey(d => d.fact_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbFacturasDetalles_tbFacturas_fact_id");

                entity.HasOne(d => d.fade_UsuCreacionNavigation)
                    .WithMany(p => p.tbFacturasDetallesfade_UsuCreacionNavigation)
                    .HasForeignKey(d => d.fade_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbFacturasDetalles_acce_tbUsuarios_fade_UsuCreacion_user_Id");

                entity.HasOne(d => d.fade_UsuModificacionNavigation)
                    .WithMany(p => p.tbFacturasDetallesfade_UsuModificacionNavigation)
                    .HasForeignKey(d => d.fade_UsuModificacion)
                    .HasConstraintName("FK_rest_tbFacturasDetalles_acce_tbUsuarios_fade_UsuModificacion_user_Id");

                entity.HasOne(d => d.plat)
                    .WithMany(p => p.tbFacturasDetalles)
                    .HasForeignKey(d => d.plat_Id)
                    .HasConstraintName("FK_rest_tbFacturasDetalles_tbProductos_prod_id");
            });

            modelBuilder.Entity<tbIngredientes>(entity =>
            {
                entity.HasKey(e => e.ingr_Id)
                    .HasName("PK_rest_tbIngredientes_ingr_Id");

                entity.ToTable("tbIngredientes", "rest");

                entity.Property(e => e.ingr_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ingr_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ingr_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ingr_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ingr_PrecioX100gr).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.ingr_UsuCreacionNavigation)
                    .WithMany(p => p.tbIngredientesingr_UsuCreacionNavigation)
                    .HasForeignKey(d => d.ingr_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbIngredientes_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.ingr_UsuModificacionNavigation)
                    .WithMany(p => p.tbIngredientesingr_UsuModificacionNavigation)
                    .HasForeignKey(d => d.ingr_UsuModificacion)
                    .HasConstraintName("FK_rest_tbIngredientes_acce_tbUsuarios_role_UsuModificacion_user_Id");

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbIngredientes)
                    .HasForeignKey(d => d.prov_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbIngredientes_tbProveedores_proc_Id");
            });

            modelBuilder.Entity<tbIngredientesHistorial>(entity =>
            {
                entity.HasKey(e => e.ingr_Id)
                    .HasName("PK_rest_tbIngredientesHistorial_ingr_Id");

                entity.ToTable("tbIngredientesHistorial", "rest");

                entity.Property(e => e.ingr_Id).ValueGeneratedNever();

                entity.Property(e => e.ingr_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ingr_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ingr_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ingr_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ingr_PrecioX100gr).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<tbIngredientesXPlatillos>(entity =>
            {
                entity.HasKey(e => e.ingrplat_Id)
                    .HasName("PK_rest_tbIngredientesXPlatillos_plat_Id");

                entity.ToTable("tbIngredientesXPlatillos", "rest");

                entity.Property(e => e.ingrplat_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ingrplat_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ingrplat_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.ingr)
                    .WithMany(p => p.tbIngredientesXPlatillos)
                    .HasForeignKey(d => d.ingr_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbIngredientesXPlatillos_tbIngredientes_ingr_Id");

                entity.HasOne(d => d.ingrplat_UsuCreacionNavigation)
                    .WithMany(p => p.tbIngredientesXPlatillosingrplat_UsuCreacionNavigation)
                    .HasForeignKey(d => d.ingrplat_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbIngredientesXPlatillos_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.ingrplat_UsuModificacionNavigation)
                    .WithMany(p => p.tbIngredientesXPlatillosingrplat_UsuModificacionNavigation)
                    .HasForeignKey(d => d.ingrplat_UsuModificacion)
                    .HasConstraintName("FK_rest_tbIngredientesXPlatillos_acce_tbUsuarios_role_UsuModificacion_user_Id");

                entity.HasOne(d => d.plat)
                    .WithMany(p => p.tbIngredientesXPlatillos)
                    .HasForeignKey(d => d.plat_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbIngredientesXPlatillos_tbPratillos_plat_Id");
            });

            modelBuilder.Entity<tbIngredientesXSucursal>(entity =>
            {
                entity.HasKey(e => e.ingrsucu_Id)
                    .HasName("PK_rest_tbIngredientesXSucursal_ingr_Id");

                entity.ToTable("tbIngredientesXSucursal", "rest");

                entity.Property(e => e.ingrsucu_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ingrsucu_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ingrsucu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.ingrsucu_StockEnGramos).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.ingr)
                    .WithMany(p => p.tbIngredientesXSucursal)
                    .HasForeignKey(d => d.ingr_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbIngredientesXSucursal_tbIngredientes_ingr_Id");

                entity.HasOne(d => d.ingrsucu_UsuCreacionNavigation)
                    .WithMany(p => p.tbIngredientesXSucursalingrsucu_UsuCreacionNavigation)
                    .HasForeignKey(d => d.ingrsucu_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbIngredientesXSucursal_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.ingrsucu_UsuModificacionNavigation)
                    .WithMany(p => p.tbIngredientesXSucursalingrsucu_UsuModificacionNavigation)
                    .HasForeignKey(d => d.ingrsucu_UsuModificacion)
                    .HasConstraintName("FK_rest_tbIngredientesXSucursal_acce_tbUsuarios_role_UsuModificacion_user_Id");

                entity.HasOne(d => d.sucu)
                    .WithMany(p => p.tbIngredientesXSucursal)
                    .HasForeignKey(d => d.sucu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbIngredientesXSucursal_tbSucursales_sucu_Id");
            });

            modelBuilder.Entity<tbMetodosPago>(entity =>
            {
                entity.HasKey(e => e.metp_Id)
                    .HasName("PK_gral_tbMetodosPago_metp_Id");

                entity.ToTable("tbMetodosPago", "gral");

                entity.Property(e => e.metp_Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.metp_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.metp_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.metp_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.metp_UsuCreacionNavigation)
                    .WithMany(p => p.tbMetodosPagometp_UsuCreacionNavigation)
                    .HasForeignKey(d => d.metp_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMetodosPago_UsuCreacion_usua_Id");

                entity.HasOne(d => d.metp_UsuModificacionNavigation)
                    .WithMany(p => p.tbMetodosPagometp_UsuModificacionNavigation)
                    .HasForeignKey(d => d.metp_UsuModificacion)
                    .HasConstraintName("FK_gral_tbMetodosPago_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbMunicipios>(entity =>
            {
                entity.HasKey(e => e.muni_Id)
                    .HasName("PK_gral_tbMunicipios_muni_Id");

                entity.ToTable("tbMunicipios", "gral");

                entity.Property(e => e.muni_Codigo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.muni_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.HasOne(d => d.depa)
                    .WithMany(p => p.tbMunicipios)
                    .HasForeignKey(d => d.depa_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_gral_tbDepartamentos_depa_Id");

                entity.HasOne(d => d.muni_UsuCreacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuCreacionNavigation)
                    .HasForeignKey(d => d.muni_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuCreacion_user_Id");

                entity.HasOne(d => d.muni_UsuModificacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuModificacionNavigation)
                    .HasForeignKey(d => d.muni_UsuModificacion)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.pant_Id)
                    .HasName("PK_acce_tbPantallas_pant_Id");

                entity.ToTable("tbPantallas", "acce");

                entity.Property(e => e.pant_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pant_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_HtmlId)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.pant_Menu)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pant_Url)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbPantallasPorRoles>(entity =>
            {
                entity.HasKey(e => e.prol_Id)
                    .HasName("PK_acce_tbPantallasPorRoles_pantrole_Id");

                entity.ToTable("tbPantallasPorRoles", "acce");

                entity.Property(e => e.prol_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.prol_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prol_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.pant)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.pant_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbPantallas_pant_Id");

                entity.HasOne(d => d.prol_UsuCreacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolesprol_UsuCreacionNavigation)
                    .HasForeignKey(d => d.prol_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuCreacion_user_Id");

                entity.HasOne(d => d.prol_UsuModificacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolesprol_UsuModificacionNavigation)
                    .HasForeignKey(d => d.prol_UsuModificacion)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuModificacion_user_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.role_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbRoles_role_Id");
            });

            modelBuilder.Entity<tbPlatillos>(entity =>
            {
                entity.HasKey(e => e.plat_Id)
                    .HasName("PK_rest_tbPlatillos_plat_Id");

                entity.ToTable("tbPlatillos", "rest");

                entity.Property(e => e.plat_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.plat_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.plat_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.plat_Imagen).IsRequired();

                entity.Property(e => e.plat_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.plat_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.cate)
                    .WithMany(p => p.tbPlatillos)
                    .HasForeignKey(d => d.cate_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbPlatillos_tbCategorias_cate_Id");

                entity.HasOne(d => d.plat_UsuCreacionNavigation)
                    .WithMany(p => p.tbPlatillosplat_UsuCreacionNavigation)
                    .HasForeignKey(d => d.plat_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbPlatillos_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.plat_UsuModificacionNavigation)
                    .WithMany(p => p.tbPlatillosplat_UsuModificacionNavigation)
                    .HasForeignKey(d => d.plat_UsuModificacion)
                    .HasConstraintName("FK_rest_tbPlatillos_acce_tbUsuarios_role_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbPlatillosHistorial>(entity =>
            {
                entity.HasKey(e => e.plat_Id)
                    .HasName("PK_rest_tbPlatillosHistorial_plat_Id");

                entity.ToTable("tbPlatillosHistorial", "rest");

                entity.Property(e => e.plat_Id).ValueGeneratedNever();

                entity.Property(e => e.plat_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.plat_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.plat_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.plat_Precio).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<tbPlatillosHistorial2>(entity =>
            {
                entity.HasKey(e => e.plat_Id)
                    .HasName("PK_rest_tbPlatillosHistorial2_plat_Id");

                entity.ToTable("tbPlatillosHistorial2", "rest");

                entity.Property(e => e.plat_Id).ValueGeneratedNever();

                entity.Property(e => e.plat_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.plat_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.plat_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.plat_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.plat_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.cate)
                    .WithMany(p => p.tbPlatillosHistorial2)
                    .HasForeignKey(d => d.cate_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbPlatillosHistorial2_tbCategorias_cate_Id");

                entity.HasOne(d => d.plat_UsuarioCreacionNavigation)
                    .WithMany(p => p.tbPlatillosHistorial2plat_UsuarioCreacionNavigation)
                    .HasForeignKey(d => d.plat_UsuarioCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbPlatillosHistorial2_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.plat_UsuarioModificacionNavigation)
                    .WithMany(p => p.tbPlatillosHistorial2plat_UsuarioModificacionNavigation)
                    .HasForeignKey(d => d.plat_UsuarioModificacion)
                    .HasConstraintName("FK_rest_tbPlatillosHistorial2_acce_tbUsuarios_role_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbProveedores>(entity =>
            {
                entity.HasKey(e => e.prov_Id)
                    .HasName("PK_rest_tbProveedores_prov_Id");

                entity.ToTable("tbProveedores", "rest");

                entity.Property(e => e.prov_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.prov_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.prov_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prov_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prov_NombreContacto)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.prov_NombreEmpresa)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.prov_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbProveedores)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbProveedores_tbMunicipio_muni_id");

                entity.HasOne(d => d.prov_UsuCreacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuCreacionNavigation)
                    .HasForeignKey(d => d.prov_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbproveedores_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.prov_UsuModificacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuModificacionNavigation)
                    .HasForeignKey(d => d.prov_UsuModificacion)
                    .HasConstraintName("FK_rest_tbproveedores_acce_tbUsuarios_role_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbReservaciones>(entity =>
            {
                entity.HasKey(e => e.rese_Id)
                    .HasName("PK_rest_tbReservaciones_rese_Id");

                entity.ToTable("tbReservaciones", "rest");

                entity.Property(e => e.rese_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.rese_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.rese_FechaHora).HasColumnType("datetime");

                entity.Property(e => e.rese_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbReservaciones)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbReservaciones_tbClientes_clie_Id");

                entity.HasOne(d => d.rese_UsuCreacionNavigation)
                    .WithMany(p => p.tbReservacionesrese_UsuCreacionNavigation)
                    .HasForeignKey(d => d.rese_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbReservaciones_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.rese_UsuModificacionNavigation)
                    .WithMany(p => p.tbReservacionesrese_UsuModificacionNavigation)
                    .HasForeignKey(d => d.rese_UsuModificacion)
                    .HasConstraintName("FK_rest_tbReservaciones_acce_tbUsuarios_role_UsuModificacion_user_Id");

                entity.HasOne(d => d.sucu)
                    .WithMany(p => p.tbReservaciones)
                    .HasForeignKey(d => d.sucu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rest_tbReservaciones_tbSucursales_sucu_Id");
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.role_Id)
                    .HasName("PK_acce_tbRoles_role_Id");

                entity.ToTable("tbRoles", "acce");

                entity.HasIndex(e => e.role_Nombre, "UQ__tbRoles__3895D82EBB5BC126")
                    .IsUnique();

                entity.Property(e => e.role_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role_UsuCreacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuCreacionNavigation)
                    .HasForeignKey(d => d.role_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.role_UsuModificacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuModificacionNavigation)
                    .HasForeignKey(d => d.role_UsuModificacion)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbSucursales>(entity =>
            {
                entity.HasKey(e => e.sucu_Id)
                    .HasName("PK_lice_tbSucursales_sucu_Id");

                entity.ToTable("tbSucursales", "rest");

                entity.Property(e => e.sucu_Direccion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.sucu_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.sucu_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sucu_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.sucu_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbSucursales)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbSucursales_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.sucu_UsuCreacionNavigation)
                    .WithMany(p => p.tbSucursalessucu_UsuCreacionNavigation)
                    .HasForeignKey(d => d.sucu_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_lice_tbSucursales_acce_tbUsuarios_sucu_UsuCreacion");

                entity.HasOne(d => d.sucu_UsuModificacionNavigation)
                    .WithMany(p => p.tbSucursalessucu_UsuModificacionNavigation)
                    .HasForeignKey(d => d.sucu_UsuModificacion)
                    .HasConstraintName("FK_lice_tbSucursales_acce_tbUsuarios_sucu_UsuModificacion");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.user_Id)
                    .HasName("PK_acce_tbUsuarios_user_Id");

                entity.ToTable("tbUsuarios", "acce");

                entity.Property(e => e.user_Contrasena).IsRequired();

                entity.Property(e => e.user_Correo).HasMaxLength(200);

                entity.Property(e => e.user_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.user_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.user_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.role_Id)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbRoles_role_Id");

                entity.HasOne(d => d.user_UsuCreacionNavigation)
                    .WithMany(p => p.Inverseuser_UsuCreacionNavigation)
                    .HasForeignKey(d => d.user_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UsuCreacion_user_Id");

                entity.HasOne(d => d.user_UsuModificacionNavigation)
                    .WithMany(p => p.Inverseuser_UsuModificacionNavigation)
                    .HasForeignKey(d => d.user_UsuModificacion)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UsuModificacion_user_Id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}