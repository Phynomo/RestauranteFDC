// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Events_Company_R.Entities.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Events_Company_R.DataAccess.Context
{
    public partial class Db_Events_Company_CContext : DbContext
    {
        public Db_Events_Company_CContext()
        {
        }

        public Db_Events_Company_CContext(DbContextOptions<Db_Events_Company_CContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Pedidos> Pedidos { get; set; }
        public virtual DbSet<Pedidos_Detalles> Pedidos_Detalles { get; set; }
        public virtual DbSet<VW_Pedidos_ListarPedidos> VW_Pedidos_ListarPedidos { get; set; }
        public virtual DbSet<VW_tbClientes_ListarClientes> VW_tbClientes_ListarClientes { get; set; }
        public virtual DbSet<VW_tbDepartamentos> VW_tbDepartamentos { get; set; }
        public virtual DbSet<VW_tbDirecciones> VW_tbDirecciones { get; set; }
        public virtual DbSet<VW_tbEmpleados_ListarEmpleados> VW_tbEmpleados_ListarEmpleados { get; set; }
        public virtual DbSet<VW_tbEstadosCiviles> VW_tbEstadosCiviles { get; set; }
        public virtual DbSet<VW_tbEventos_ListarEventos> VW_tbEventos_ListarEventos { get; set; }
        public virtual DbSet<VW_tbInventario_ListarInventario> VW_tbInventario_ListarInventario { get; set; }
        public virtual DbSet<VW_tbMunicipios> VW_tbMunicipios { get; set; }
        public virtual DbSet<VW_tbPantallas_ListarPantallas> VW_tbPantallas_ListarPantallas { get; set; }
        public virtual DbSet<VW_tbPaqueteDetalles_ListarPaqueteDetalles> VW_tbPaqueteDetalles_ListarPaqueteDetalles { get; set; }
        public virtual DbSet<VW_tbPaquetes_Encabezado_ListarPaquetesEncabezado> VW_tbPaquetes_Encabezado_ListarPaquetesEncabezado { get; set; }
        public virtual DbSet<VW_tbProveedores_ListarProveedores> VW_tbProveedores_ListarProveedores { get; set; }
        public virtual DbSet<VW_tbRoles_ListarRoles> VW_tbRoles_ListarRoles { get; set; }
        public virtual DbSet<VW_tbServicios_ListarServicios> VW_tbServicios_ListarServicios { get; set; }
        public virtual DbSet<VW_tbTipoPago> VW_tbTipoPago { get; set; }
        public virtual DbSet<VW_tbUsuario> VW_tbUsuario { get; set; }
        public virtual DbSet<tbClientes> tbClientes { get; set; }
        public virtual DbSet<tbDepartamentos> tbDepartamentos { get; set; }
        public virtual DbSet<tbDirecciones> tbDirecciones { get; set; }
        public virtual DbSet<tbEmpleados> tbEmpleados { get; set; }
        public virtual DbSet<tbEstadosCiviles> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbEventos> tbEventos { get; set; }
        public virtual DbSet<tbFacturas> tbFacturas { get; set; }
        public virtual DbSet<tbInventario> tbInventario { get; set; }
        public virtual DbSet<tbMunicipios> tbMunicipios { get; set; }
        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbPantallasRoles> tbPantallasRoles { get; set; }
        public virtual DbSet<tbPaquete_Detalles> tbPaquete_Detalles { get; set; }
        public virtual DbSet<tbPaquetes_Encabezado> tbPaquetes_Encabezado { get; set; }
        public virtual DbSet<tbProveedores> tbProveedores { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbServicios> tbServicios { get; set; }
        public virtual DbSet<tbTipoPago> tbTipoPago { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS");

            modelBuilder.Entity<Pedidos>(entity =>
            {
                entity.HasKey(e => e.pedi_Id)
                    .HasName("PK_even_Pedidos_pedi_Id");

                entity.ToTable("Pedidos", "Even");

                entity.Property(e => e.pedi_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pedi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pedi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pedi_Final).HasColumnType("datetime");

                entity.Property(e => e.pedi_Inicio).HasColumnType("datetime");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.Pedidos)
                    .HasForeignKey(d => d.clie_Id)
                    .HasConstraintName("FK_even_tbFactura_even_tbClientes_clie_Id");

                entity.HasOne(d => d.dire)
                    .WithMany(p => p.Pedidos)
                    .HasForeignKey(d => d.dire_Id)
                    .HasConstraintName("FK_even_tbFactura_Gral_tbDirecciones_dire_Id");

                entity.HasOne(d => d.pedi_UsuarioCreadorNavigation)
                    .WithMany(p => p.Pedidospedi_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.pedi_UsuarioCreador)
                    .HasConstraintName("FK_even_Pedidos_UsuarioCreador_tbUsuarios_usua_Id");

                entity.HasOne(d => d.pedi_UsuarioModificadorNavigation)
                    .WithMany(p => p.Pedidospedi_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.pedi_UsuarioModificador)
                    .HasConstraintName("FK_even_Pedidos_UsuarioModificador_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<Pedidos_Detalles>(entity =>
            {
                entity.HasKey(e => e.pede_Id)
                    .HasName("PK_even_Pedidos_Detalles_pede_Id");

                entity.ToTable("Pedidos_Detalles", "Even");

                entity.Property(e => e.pede_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pede_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pede_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pede_Prefijo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.pede_UsuarioCreadorNavigation)
                    .WithMany(p => p.Pedidos_Detallespede_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.pede_UsuarioCreador)
                    .HasConstraintName("FK_even_Pedidos_Detalles_UsuarioCreador_tbUsuarios_usua_Id");

                entity.HasOne(d => d.pede_UsuarioModificadorNavigation)
                    .WithMany(p => p.Pedidos_Detallespede_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.pede_UsuarioModificador)
                    .HasConstraintName("FK_even_Pedidos_Detalles_UsuarioModificador_tbUsuarios_usua_Id");

                entity.HasOne(d => d.pedi)
                    .WithMany(p => p.Pedidos_Detalles)
                    .HasForeignKey(d => d.pedi_Id)
                    .HasConstraintName("FK_even_Pedidos_Detalles_even_Pedidos_pedi_Id");
            });

            modelBuilder.Entity<VW_Pedidos_ListarPedidos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Pedidos_ListarPedidos", "Even");

                entity.Property(e => e.clie_Nombres).HasMaxLength(201);

                entity.Property(e => e.dire_Descripcion).HasMaxLength(150);

                entity.Property(e => e.pedi_Final).HasColumnType("datetime");

                entity.Property(e => e.pedi_Inicio).HasColumnType("datetime");
            });

            modelBuilder.Entity<VW_tbClientes_ListarClientes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbClientes_ListarClientes", "Even");

                entity.Property(e => e.clie_DNI)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Id).ValueGeneratedOnAdd();

                entity.Property(e => e.clie_Nombres).HasMaxLength(201);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Telefono)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VW_tbDepartamentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbDepartamentos", "Gral");

                entity.Property(e => e.dept_Descripcion).HasMaxLength(200);

                entity.Property(e => e.dept_Id)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VW_tbDirecciones>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbDirecciones", "Gral");

                entity.Property(e => e.dept_Descripcion).HasMaxLength(200);

                entity.Property(e => e.dire_Descripcion).HasMaxLength(150);

                entity.Property(e => e.muni_Descripcion).HasMaxLength(200);
            });

            modelBuilder.Entity<VW_tbEmpleados_ListarEmpleados>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEmpleados_ListarEmpleados", "Even");

                entity.Property(e => e.empl_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.empl_DNI)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empl_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empl_Nombres)
                    .IsRequired()
                    .HasMaxLength(201);

                entity.Property(e => e.empl_Telefono)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_sexo)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.esci_Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.muni_Descripcion).HasMaxLength(200);
            });

            modelBuilder.Entity<VW_tbEstadosCiviles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEstadosCiviles", "Gral");

                entity.Property(e => e.esci_Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.esci_Id)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VW_tbEventos_ListarEventos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEventos_ListarEventos", "Even");

                entity.Property(e => e.evnt_Descri).IsRequired();

                entity.Property(e => e.evnt_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VW_tbInventario_ListarInventario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbInventario_ListarInventario", "Even");

                entity.Property(e => e.inve_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VW_tbMunicipios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbMunicipios", "Gral");

                entity.Property(e => e.dept_Descripcion).HasMaxLength(200);

                entity.Property(e => e.muni_Descripcion).HasMaxLength(200);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VW_tbPantallas_ListarPantallas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbPantallas_ListarPantallas", "Acce");

                entity.Property(e => e.pant_Id).ValueGeneratedOnAdd();

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbPaqueteDetalles_ListarPaqueteDetalles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbPaqueteDetalles_ListarPaqueteDetalles", "Even");

                entity.Property(e => e.paqt_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbPaquetes_Encabezado_ListarPaquetesEncabezado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbPaquetes_Encabezado_ListarPaquetesEncabezado", "Even");

                entity.Property(e => e.paqt_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbProveedores_ListarProveedores>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbProveedores_ListarProveedores", "Even");

                entity.Property(e => e.nombreCompleto).HasMaxLength(100);

                entity.Property(e => e.prov_Id).ValueGeneratedOnAdd();


                entity.Property(e => e.prov_Telefono)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VW_tbRoles_ListarRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbRoles_ListarRoles", "Acce");

                entity.Property(e => e.role_Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.role_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VW_tbServicios_ListarServicios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbServicios_ListarServicios", "Even");

                entity.Property(e => e.Proveedor).HasMaxLength(201);
            });

            modelBuilder.Entity<VW_tbTipoPago>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbTipoPago", "Gral");

                entity.Property(e => e.pago_Descripcion).HasMaxLength(100);

                entity.Property(e => e.pago_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VW_tbUsuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbUsuario", "Acce");

                entity.Property(e => e.empleados)
                    .IsRequired()
                    .HasMaxLength(201);

                entity.Property(e => e.role_Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.usua_Usuario).HasMaxLength(100);
            });

            modelBuilder.Entity<tbClientes>(entity =>
            {
                entity.HasKey(e => e.clie_Id)
                    .HasName("PK_even_tbClientes_pers_Id");

                entity.ToTable("tbClientes", "Even");

                entity.HasIndex(e => e.clie_DNI, "UQ_even_tbClientes_pers_DNI")
                    .IsUnique();

                entity.Property(e => e.clie_ApellIdos).HasMaxLength(100);

                entity.Property(e => e.clie_DNI)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clie_Nombres).HasMaxLength(100);

                entity.Property(e => e.clie_Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.clie_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbClientesclie_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.clie_UsuarioCreador)
                    .HasConstraintName("FK_even_tbClientes_clie_UsuarioCreador_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.clie_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbClientesclie_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.clie_UsuarioModificador)
                    .HasConstraintName("FK_even_tbClientes_clie_UsuarioModificador_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDepartamentos>(entity =>
            {
                entity.HasKey(e => e.dept_Id)
                    .HasName("PK_Gral_tbDepartamentos_dept_Id");

                entity.ToTable("tbDepartamentos", "Gral");

                entity.Property(e => e.dept_Id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.dept_Descripcion).HasMaxLength(200);

                entity.Property(e => e.dept_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.dept_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.dept_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbDepartamentosdept_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.dept_UsuarioCreador)
                    .HasConstraintName("FK_Gral_tbDepartamentos_UsuarioCrea_tbUsuarios_usua_Id");

                entity.HasOne(d => d.dept_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbDepartamentosdept_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.dept_UsuarioModificador)
                    .HasConstraintName("FK_Gral_tbDepartamentos_UsuarioModifica_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDirecciones>(entity =>
            {
                entity.HasKey(e => e.dire_Id)
                    .HasName("PK_even_tbDireccion_dire_Id");

                entity.ToTable("tbDirecciones", "Gral");

                entity.Property(e => e.dire_Descripcion).HasMaxLength(150);

                entity.Property(e => e.dire_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.dire_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.dire_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Id)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.dire_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbDireccionesdire_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.dire_UsuarioCreador)
                    .HasConstraintName("FK_Gral_tbDirecciones_dire_UsuarioCreador_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.dire_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbDireccionesdire_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.dire_UsuarioModificador)
                    .HasConstraintName("FK_Gral_tbDirecciones_dire_UsuarioModificador_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbDirecciones)
                    .HasForeignKey(d => d.muni_Id)
                    .HasConstraintName("FK_even_tbDireccion_muni_Id_even_tbMunicipios_muni_Id");
            });

            modelBuilder.Entity<tbEmpleados>(entity =>
            {
                entity.HasKey(e => e.empl_Id)
                    .HasName("PK_even_tbEmpleados_pers_Id");

                entity.ToTable("tbEmpleados", "Even");

                entity.HasIndex(e => e.empl_DNI, "UQ_even_tbEmpleados_pers_DNI")
                    .IsUnique();

                entity.Property(e => e.empl_Apellidos)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empl_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.empl_DNI)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empl_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.empl_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.empl_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empl_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empl_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empl_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_Telefono)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.esci_Id)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.empl_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbEmpleadosempl_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.empl_UsuarioCreador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_even_tbEmpleados_Acce_tbUsuarios_empl_UsuarioCreador");

                entity.HasOne(d => d.empl_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbEmpleadosempl_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.empl_UsuarioModificador)
                    .HasConstraintName("FK_even_tbEmpleados_Acce_tbUsuarios_empl_UsuarioModificador");

                entity.HasOne(d => d.esci)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.esci_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_even_tbEmpleados_Gral_tbEstadosCiviles_estciv_Id");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_even_tbEmpleados_Gral_tbMunicipios_muni_Id");
            });

            modelBuilder.Entity<tbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.esci_Id)
                    .HasName("PK_Gral_tbEstadosCiviles_estciv_Id");

                entity.ToTable("tbEstadosCiviles", "Gral");

                entity.Property(e => e.esci_Id)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.esci_Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.esci_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.esci_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.esci_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbEstadosCivilesesci_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.esci_UsuarioCreador)
                    .HasConstraintName("FK_Gral_tbEstadosCiviles_UsuarioCrea_tbUsuarios_usua_Id");

                entity.HasOne(d => d.esci_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbEstadosCivilesesci_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.esci_UsuarioModificador)
                    .HasConstraintName("FK_Gral_tbEstadosCiviles_UsuarioModifica_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEventos>(entity =>
            {
                entity.HasKey(e => e.evnt_Id)
                    .HasName("PK_even_tbEventos_evnt_Id");

                entity.ToTable("tbEventos", "Even");

                entity.Property(e => e.evnt_Descri).IsRequired();

                entity.Property(e => e.evnt_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.evnt_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.evnt_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.evnt_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbEventosevnt_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.evnt_UsuarioCreador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_even_tbEventos_UsuarioCreador_tbUsuarios_usua_Id");

                entity.HasOne(d => d.evnt_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbEventosevnt_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.evnt_UsuarioModificador)
                    .HasConstraintName("FK_even_tbEventos_UsuarioModifica_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbFacturas>(entity =>
            {
                entity.HasKey(e => e.fact_Id)
                    .HasName("PK_even_tbFactura_fact_Id");

                entity.ToTable("tbFacturas", "Even");

                entity.Property(e => e.fact_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.fact_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fact_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.fact_Impuesto).HasDefaultValueSql("((0.15))");

                entity.HasOne(d => d.fact_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbFacturasfact_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.fact_UsuarioCreador)
                    .HasConstraintName("FK_even_tbFacturas_UsuarioCreador_tbUsuarios_usua_Id");

                entity.HasOne(d => d.fact_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbFacturasfact_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.fact_UsuarioModificador)
                    .HasConstraintName("FK_even_tbFacturas_UsuarioModificador_tbUsuarios_usua_Id");

                entity.HasOne(d => d.pago)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.pago_id)
                    .HasConstraintName("FK_even_tbFactura_pago_id_Gral_tbTipoPago_pago_id");

                entity.HasOne(d => d.pedi)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.pedi_Id)
                    .HasConstraintName("FK_even_tbFactura_pago_id_Gral_tbPedidos_pago_id");
            });

            modelBuilder.Entity<tbInventario>(entity =>
            {
                entity.HasKey(e => e.inve_Id)
                    .HasName("PK_even_tbInventario_inve_Id");

                entity.ToTable("tbInventario", "Even");

                entity.Property(e => e.inve_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.inve_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.inve_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.inve_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbInventarioinve_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.inve_UsuarioCreador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_even_tbInventario_UsuarioCreador_tbUsuarios_usua_Id");

                entity.HasOne(d => d.inve_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbInventarioinve_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.inve_UsuarioModificador)
                    .HasConstraintName("FK_even_tbInventario_UsuarioModifica_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbMunicipios>(entity =>
            {
                entity.HasKey(e => e.muni_Id)
                    .HasName("PK_Gral_tbMunicipios_muni_Id");

                entity.ToTable("tbMunicipios", "Gral");

                entity.Property(e => e.muni_Id)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.dept_Id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Descripcion).HasMaxLength(200);

                entity.Property(e => e.muni_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.dept)
                    .WithMany(p => p.tbMunicipios)
                    .HasForeignKey(d => d.dept_Id)
                    .HasConstraintName("FK_Gral_tbMunicipios_tbDepartamentos_dept_Id");

                entity.HasOne(d => d.muni_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.muni_UsuarioCreador)
                    .HasConstraintName("FK_Gral_tbMunicipios_UsuarioCrea_tbUsuarios_usua_Id");

                entity.HasOne(d => d.muni_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.muni_UsuarioModificador)
                    .HasConstraintName("FK_Gral_tbMunicipios_UsuarioModifica_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.pant_Id)
                    .HasName("PK_Acce_tbPantallas_pant_Id");

                entity.ToTable("tbPantallas", "Acce");

                entity.Property(e => e.pant_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pant_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_HtmlId)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.pant_Menu)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pant_URL)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.user_UsuCreacionNavigation)
                    .WithMany(p => p.tbPantallasuser_UsuCreacionNavigation)
                    .HasForeignKey(d => d.user_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallas_UsuarioCrea_tbUsuarios_usua_Id");

                entity.HasOne(d => d.user_UsuModificacionNavigation)
                    .WithMany(p => p.tbPantallasuser_UsuModificacionNavigation)
                    .HasForeignKey(d => d.user_UsuModificacion)
                    .HasConstraintName("FK_acce_tbPantallas_UsuarioModifica_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPantallasRoles>(entity =>
            {
                entity.HasKey(e => e.ptro_Id)
                    .HasName("PK_Acce_tbPantallasPorRoles_pantrole_Id");

                entity.ToTable("tbPantallasRoles", "Acce");

                entity.Property(e => e.ptro_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ptro_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ptro_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.pant)
                    .WithMany(p => p.tbPantallasRoles)
                    .HasForeignKey(d => d.pant_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acce_tbPantallasPorRoles_Acce_tbPantallas_pant_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbPantallasRoles)
                    .HasForeignKey(d => d.role_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acce_tbPantallasPorRoles_Acce_tbRoles_role_Id");

                entity.HasOne(d => d.user_UsuCreacionNavigation)
                    .WithMany(p => p.tbPantallasRolesuser_UsuCreacionNavigation)
                    .HasForeignKey(d => d.user_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acce_tbPantallasRoles_user_UsuCreacion_Acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.user_UsuModificacionNavigation)
                    .WithMany(p => p.tbPantallasRolesuser_UsuModificacionNavigation)
                    .HasForeignKey(d => d.user_UsuModificacion)
                    .HasConstraintName("FK_Acce_tbPantallasRoles_user_UsuModificacion_Acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPaquete_Detalles>(entity =>
            {
                entity.HasKey(e => e.pqsv_Id)
                    .HasName("PK_even_tbPaqueteServicio_pqsv_Ids");

                entity.ToTable("tbPaquete_Detalles", "Even");

                entity.Property(e => e.pqsv_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pqsv_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pqsv_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.inve)
                    .WithMany(p => p.tbPaquete_Detalles)
                    .HasForeignKey(d => d.inve_Id)
                    .HasConstraintName("FK_even_tbPaqueteDetalles_tbInventario_inve_Ids");

                entity.HasOne(d => d.paqt)
                    .WithMany(p => p.tbPaquete_Detalles)
                    .HasForeignKey(d => d.paqt_Id)
                    .HasConstraintName("FK_even_tbPaqueteServicio_even_tbPaquetes_paqt_Ids");

                entity.HasOne(d => d.pqsv_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbPaquete_Detallespqsv_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.pqsv_UsuarioCreador)
                    .HasConstraintName("FK_even_tbPaquete_Detalles_UsuarioCreador_tbUsuarios_usua_Id");

                entity.HasOne(d => d.pqsv_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbPaquete_Detallespqsv_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.pqsv_UsuarioModificador)
                    .HasConstraintName("FK_even_tbPaquete_Detalles_UsuarioModifica_tbUsuarios_usua_Id");

                entity.HasOne(d => d.serv)
                    .WithMany(p => p.tbPaquete_Detalles)
                    .HasForeignKey(d => d.serv_Id)
                    .HasConstraintName("FK_even_tbPaqueteServicio_even_tbServicios_serv_Ids");
            });

            modelBuilder.Entity<tbPaquetes_Encabezado>(entity =>
            {
                entity.HasKey(e => e.paqt_Id)
                    .HasName("PK_even_tbPaquetes_paq_Id");

                entity.ToTable("tbPaquetes_Encabezado", "Even");

                entity.Property(e => e.paqt_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.paqt_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.paqt_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.paqt_Nombre).HasMaxLength(100);

                entity.HasOne(d => d.evnt)
                    .WithMany(p => p.tbPaquetes_Encabezado)
                    .HasForeignKey(d => d.evnt_Id)
                    .HasConstraintName("FK_even_tbPaquetes_Encabezado_prov_Id_tbProveedores_prov_Id");

                entity.HasOne(d => d.paqt_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbPaquetes_Encabezadopaqt_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.paqt_UsuarioCreador)
                    .HasConstraintName("FK_even_tbPaquetes_Encabezado_UsuarioCreador_tbUsuarios_usua_Id");

                entity.HasOne(d => d.paqt_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbPaquetes_Encabezadopaqt_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.paqt_UsuarioModificador)
                    .HasConstraintName("FK_even_tbPaquetes_Encabezado_UsuarioModifica_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbProveedores>(entity =>
            {
                entity.HasKey(e => e.prov_Id)
                    .HasName("PK_even_tbProveedores_prov_Id");

                entity.ToTable("tbProveedores", "Even");

                entity.Property(e => e.prov_Apellido).HasMaxLength(100);

                entity.Property(e => e.prov_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.prov_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prov_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prov_Nombre).HasMaxLength(100);

                entity.Property(e => e.prov_Telefono)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.prov_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.prov_UsuarioCreador)
                    .HasConstraintName("FK_even_tbProveedores_UsuarioCreador_tbUsuarios_usua_Id");

                entity.HasOne(d => d.prov_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.prov_UsuarioModificador)
                    .HasConstraintName("FK_even_tbProveedores_UsuarioModifica_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.role_Id)
                    .HasName("PK_acce_tbRoles_role_Id");

                entity.ToTable("tbRoles", "Acce");

                entity.Property(e => e.role_Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.role_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.role_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbRolesrole_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.role_UsuarioCreador)
                    .HasConstraintName("FK_acce_tbRoles_UsuarioCrea_tbUsuarios_usua_Id");

                entity.HasOne(d => d.role_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbRolesrole_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.role_UsuarioModificador)
                    .HasConstraintName("FK_acce_tbRoles_UsuarioModifica_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbServicios>(entity =>
            {
                entity.HasKey(e => e.serv_Id)
                    .HasName("PK_even_tbServicios_serv_Id");

                entity.ToTable("tbServicios", "Even");

                entity.Property(e => e.serv_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.serv_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.serv_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbServicios)
                    .HasForeignKey(d => d.prov_Id)
                    .HasConstraintName("FK_even_tbServicios_prov_Id_tbProveedores_prov_Id");

                entity.HasOne(d => d.serv_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbServiciosserv_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.serv_UsuarioCreador)
                    .HasConstraintName("FK_even_tbServicios_UsuarioCreador_tbUsuarios_usua_Id");

                entity.HasOne(d => d.serv_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbServiciosserv_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.serv_UsuarioModificador)
                    .HasConstraintName("FK_even_tbServicios_UsuarioModifica_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbTipoPago>(entity =>
            {
                entity.HasKey(e => e.pago_id)
                    .HasName("PK_Gral_tbPago_pago_id");

                entity.ToTable("tbTipoPago", "Gral");

                entity.Property(e => e.pago_Descripcion).HasMaxLength(100);

                entity.Property(e => e.pago_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pago_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pago_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.pago_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbTipoPagopago_UsuarioCreadorNavigation)
                    .HasForeignKey(d => d.pago_UsuarioCreador)
                    .HasConstraintName("FK_Gral_tbTipoPago_UsuarioCrea_tbUsuario_usuid");

                entity.HasOne(d => d.pago_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbTipoPagopago_UsuarioModificadorNavigation)
                    .HasForeignKey(d => d.pago_UsuarioModificador)
                    .HasConstraintName("FK_Gral_tbTipoPago_UsuarioModifica_tbUsuario_usuid");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.usua_Id)
                    .HasName("PK_acce_tbUsuarios_usua_Id");

                entity.ToTable("tbUsuarios", "Acce");

                entity.HasIndex(e => e.usua_Usuario, "UQ_acce_tbUsuarios_usua_Usuario")
                    .IsUnique();

                entity.Property(e => e.usua_Clave).IsUnicode(false);

                entity.Property(e => e.usua_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.usua_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.usua_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.usua_Usuario).HasMaxLength(100);

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.empl_Id)
                    .HasConstraintName("FK_acce_tbUsuarios_even_tbEmpleados_empl_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.role_Id)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_role_Id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}